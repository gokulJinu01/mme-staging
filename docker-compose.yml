# Docker Compose file for MME (Multi-Modal Memory Extractor)
# Note: Docker Compose version specification is obsolete as of v2.x

services:
  # Traefik API Gateway
  traefik:
    image: traefik:v2.10
    container_name: mme-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "9000:9000"  # Traefik dashboard
      - "8082:8082"  # Traefik metrics
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
      - mme-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=dashboard"

  # JWT Verifier Service for ForwardAuth
  jwt-verifier:
    build:
      context: ./jwt-verifier
      dockerfile: Dockerfile
    container_name: mme-jwt-verifier
    restart: unless-stopped
    environment:
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - PORT=3000
    networks:
      - mme-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jwt-verifier.rule=Host(`auth.localhost`)"
      - "traefik.http.services.jwt-verifier.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://127.0.0.1:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: mme-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=mme
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - mme-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: mme-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - mme-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MME Tagging Service (Go/Fiber) - Now behind Traefik
  mme-tagging-service:
    build:
      context: ./mme-tagging-service
      dockerfile: Dockerfile
    container_name: mme-tagging-service
    restart: unless-stopped
    # Remove direct port exposure - now accessed through Traefik
    # ports:
    #   - "8081:8080"

    environment:
      - MONGODB_URI=mongodb://admin:${MONGODB_ROOT_PASSWORD}@mongodb:27017/mme?authSource=admin&maxPoolSize=100&minPoolSize=10&maxIdleTimeMS=300000
      - GO_ENV=production
      - MME_LOG_LEVEL=info
      - PORT=8080
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-*}
      # Integration with tagmaker service for automatic tagging
      - MME_TAGMAKER_SERVICE_URL=http://mme-tagmaker-service:8000
      # MME Bounded Parameters (Optional - has defaults)
      - MME_MAX_EDGES_PER_TAG=${MME_MAX_EDGES_PER_TAG:-32}
      - MME_MAX_DEPTH=${MME_MAX_DEPTH:-2}
      - MME_BEAM_WIDTH=${MME_BEAM_WIDTH:-128}
      - MME_MAX_SEED_TAGS=${MME_MAX_SEED_TAGS:-5}
      - MME_DECAY_ALPHA=${MME_DECAY_ALPHA:-0.85}
      - MME_MIN_ACTIVATION=${MME_MIN_ACTIVATION:-0.05}
      - MME_TOKEN_BUDGET=${MME_TOKEN_BUDGET:-2048}
      - MME_DIVERSITY_LAMBDA=${MME_DIVERSITY_LAMBDA:-0.15}
      - MME_RECENCY_TAU_DAYS=${MME_RECENCY_TAU_DAYS:-60}
      - MME_CACHE_TTL_SECS=${MME_CACHE_TTL_SECS:-300}
      # Graceful degradation parameters (resilience policy v1 - 2025-08-20)
      - ALLOW_NEIGHBORS=${ALLOW_NEIGHBORS:-true}
      - PROMOTE_TOPK=${PROMOTE_TOPK:-10}
      - MME_DEGRADATION_MODE=${MME_DEGRADATION_MODE:-false}
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'
        reservations:
          memory: 256m
          cpus: '0.1'
    depends_on:
      mongodb:
        condition: service_healthy
      jwt-verifier:
        condition: service_healthy
    networks:
      - mme-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mme-tagging.rule=Host(`mme.localhost`)"
      - "traefik.http.middlewares.auth-forward.forwardauth.address=http://jwt-verifier:3000/verify"
      - "traefik.http.middlewares.auth-forward.forwardauth.trustforwardheader=true"
      - "traefik.http.middlewares.auth-forward.forwardauth.authresponseheaders=X-User-ID,X-User-Roles,X-Org-ID,X-Project-ID"
      - "traefik.http.routers.mme-tagging.middlewares=auth-forward@docker"
      - "traefik.http.services.mme-tagging.loadbalancer.server.port=8080"
      - "traefik.http.routers.mme-tagging.entrypoints=web"
      
      # Route-specific middlewares for resilience (resilience policy v1 - 2025-08-20)
      - "traefik.http.routers.mme-query.rule=Host(`mme.localhost`) && PathPrefix(`/memory/query`)"
      - "traefik.http.routers.mme-query.middlewares=auth-forward@docker,retry-readonly@file"
      - "traefik.http.routers.mme-query.service=mme-tagging@docker"
      - "traefik.http.routers.mme-query.entrypoints=web"
      
      - "traefik.http.routers.mme-recent.rule=Host(`mme.localhost`) && PathPrefix(`/memory/recent`)"
      - "traefik.http.routers.mme-recent.middlewares=auth-forward@docker,retry-readonly@file"
      - "traefik.http.routers.mme-recent.service=mme-tagging@docker"
      - "traefik.http.routers.mme-recent.entrypoints=web"
      
      - "traefik.http.routers.mme-promote.rule=Host(`mme.localhost`) && PathPrefix(`/memory/promote`)"
      - "traefik.http.routers.mme-promote.middlewares=auth-forward@docker,retry-readonly@file,ratelimit-promote@file"
      - "traefik.http.routers.mme-promote.service=mme-tagging@docker"
      - "traefik.http.routers.mme-promote.entrypoints=web"
      
      - "traefik.http.routers.mme-save.rule=Host(`mme.localhost`) && PathPrefix(`/memory/save`)"
      - "traefik.http.routers.mme-save.middlewares=auth-forward@docker,ratelimit-save@file"
      - "traefik.http.routers.mme-save.service=mme-tagging@docker"
      - "traefik.http.routers.mme-save.entrypoints=web"
      
      - "traefik.http.routers.mme-delete.rule=Host(`mme.localhost`) && PathPrefix(`/memory/`) && Method(`DELETE`)"
      - "traefik.http.routers.mme-delete.middlewares=auth-forward@docker"
      - "traefik.http.routers.mme-delete.service=mme-tagging@docker"
      - "traefik.http.routers.mme-delete.entrypoints=web"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://127.0.0.1:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # MME Tagmaker Service (Python/FastAPI) - Now behind Traefik
  mme-tagmaker-service:
    build:
      context: ./mme-tagmaker-service
      dockerfile: Dockerfile
    container_name: mme-tagmaker-service
    restart: unless-stopped
    # Remove direct port exposure - now accessed through Traefik
    # ports:
    #   - "8000:8000"

    environment:
      # Service Integration
      - ENABLE_TAGGING_SERVICE=true
      - MME_TAGGING_SERVICE_URL=http://mme-tagging-service:8080
      - PYTHON_ENV=production
      - LOG_LEVEL=INFO
      # OpenAI Configuration (Required)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # MongoDB Configuration
      - MONGODB_URI=mongodb://admin:${MONGODB_ROOT_PASSWORD}@mongodb:27017/mme?authSource=admin&maxPoolSize=100&minPoolSize=10&maxIdleTimeMS=300000
      - MONGODB_DATABASE=mme
      - MONGODB_COLLECTION=memories
      # Edge Learning Parameters (Optional)
      - MME_LEARN_ETA=${MME_LEARN_ETA:-0.05}
      - MME_LEARN_R=${MME_LEARN_R:-0.03}
      - MME_LEARN_D=${MME_LEARN_D:-0.01}
      - MME_LEARN_WMAX=${MME_LEARN_WMAX:-1.0}
      - MME_LEARN_WINDOW_HOURS=${MME_LEARN_WINDOW_HOURS:-24}
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'
        reservations:
          memory: 256m
          cpus: '0.1'
    depends_on:
      mongodb:
        condition: service_healthy
      mme-tagging-service:
        condition: service_healthy
      jwt-verifier:
        condition: service_healthy
    networks:
      - mme-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mme-tagmaker.rule=Host(`tagmaker.localhost`)"
      - "traefik.http.middlewares.auth-forward.forwardauth.address=http://jwt-verifier:3000/verify"
      - "traefik.http.middlewares.auth-forward.forwardauth.trustforwardheader=true"
      - "traefik.http.middlewares.auth-forward.forwardauth.authresponseheaders=X-User-ID,X-User-Roles,X-Org-ID,X-Project-ID"
      - "traefik.http.routers.mme-tagmaker.middlewares=auth-forward@docker"
      - "traefik.http.services.mme-tagmaker.loadbalancer.server.port=8000"
      - "traefik.http.routers.mme-tagmaker.entrypoints=web"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MongoDB Exporter for Prometheus
  mongodb-exporter:
    image: percona/mongodb_exporter:0.39
    container_name: mme-mongodb-exporter
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://admin:${MONGODB_ROOT_PASSWORD}@mongodb:27017/mme?authSource=admin&maxPoolSize=100&minPoolSize=10&maxIdleTimeMS=300000
    networks:
      - mme-network
    depends_on:
      mongodb:
        condition: service_healthy

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: mme-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - mme-network

  # Redis Exporter for Cache Monitoring
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: mme-redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - mme-network
    depends_on:
      - redis

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: mme-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules.yml:/etc/prometheus/rules.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
      - ./logs:/logs:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mme-network
    depends_on:
      - mongodb-exporter

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: mme-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - mme-network

  # Grafana
  grafana:
    image: grafana/grafana:10.0.0
    container_name: mme-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - mme-network
    depends_on:
      - prometheus

  # Isolation Sentinel Cron
  isolation-sentinel:
    image: alpine:latest
    container_name: mme-isolation-sentinel
    restart: unless-stopped
    volumes:
      - ./scripts:/scripts:ro
      - ./logs:/logs
      - ./monitoring/file_sd:/etc/prometheus/file_sd:rw
    command: >
      sh -c "
        apk add --no-cache curl jq bash &&
        echo '*/5 * * * * /scripts/isolation_sentinel.sh' > /var/spool/cron/crontabs/root &&
        crond -f -l 2
      "
    networks:
      - mme-network
    depends_on:
      - mme-tagging-service



  # Spike-trace Sampler Cron
  spike-trace-sampler:
    image: alpine:latest
    container_name: mme-spike-trace-sampler
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./scripts:/scripts:ro
      - ./logs:/logs
    command: >
      sh -c "
        apk add --no-cache curl jq bash docker-cli &&
        echo '0 1 * * * /scripts/spike_trace_sampler.sh' > /var/spool/cron/crontabs/root &&
        crond -f -l 2
      "
    networks:
      - mme-network
    depends_on:
      - mme-tagging-service

networks:
  mme-network:
    driver: bridge
    name: mme-network

volumes:
  mongodb_data:
    name: mme_mongodb_data
  mongodb_config:
    name: mme_mongodb_config
  redis_data:
    name: mme_redis_data
  prometheus_data:
    name: mme_prometheus_data
  alertmanager_data:
    name: mme_alertmanager_data
  grafana_data:
    name: mme_grafana_data
